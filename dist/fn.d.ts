declare const fn: {
    _addLoader: (requestId: any, prom: any, source: any) => number;
    _compareValues: (a: any, b: any, prop: any, dir?: string) => 0 | 1 | -1;
    _deleteLoader: (requestId: any, res?: any, isAbort?: boolean) => boolean;
    abort: (requestId: any) => void;
    abortURL: (url: any) => void;
    addColors: (colors: object) => void;
    addInputs: (form: any, params?: any, prefix?: string) => void;
    addStyle: (ele: any, o: any) => void;
    adjustHeight: () => void;
    adjustSize: (type: any, eles: any) => void;
    adjustWidth: () => void;
    ajax: (url: any, datatype?: any, data?: any, success?: any, failure?: any, abort?: any) => any;
    analyzeFunction: (fn: any) => {
        body: any;
        args: any[];
        argString: string;
        isArrow: boolean;
        hasFunction: boolean;
        name: any;
        isAsync: boolean;
        hash: string;
    };
    animateCss: (ele: any, animationName: any, callback: any) => void;
    arrayBuffer2String: (buf: any) => any;
    arrayFromProp: (arr: any, prop: any) => any[];
    autoExtend: (namespace: any, obj: any) => void;
    baseName: (path: string, suffix?: string) => string;
    br2nl: (st: any) => string;
    calendar: (d: any, wrong_result?: boolean) => any;
    callback: (url: any, res?: any, fn?: any, fn2?: any, ele?: any) => boolean;
    camelize: (str: any) => any;
    camelToCss: (str: any) => any;
    canvasToImage: (canvas: any) => HTMLImageElement;
    center: (ele: any) => any;
    checkProps: (obj: object, props: string | string[], checkEmpty?: boolean) => boolean;
    checkPropsDetails: (obj: object, props: string | string[], checkEmpty?: boolean) => BbnResError;
    checkPropsOrDie: (obj: object, props: string | string[], checkEmpty?: boolean) => boolean;
    checkType: (value: any, type: string | object, msg?: string, ...logs: any[]) => void;
    circularReplacer: () => (key: any, value: any) => any;
    clone: (obj: any) => any;
    colorToHex: (color: any) => string | CanvasGradient | CanvasPattern;
    compare: (v1: any, v2: any, operator: any) => boolean;
    compareConditions: (data: any, filter: any) => boolean;
    copy: (st: any) => Promise<unknown>;
    correctCase: (str: any) => any;
    count: (arr: any[], prop: string | object, val?: any, operator?: string) => number;
    crc32: (str: any) => number;
    createObject: (...args: any[]) => any;
    cssExists: (f: any) => boolean;
    date: (v: any) => any;
    dateSQL: (v: any, dayOnly: any) => any;
    daysInMonth: (v: any) => number | false;
    deepPath: (arr: any[], filter: object, deepProperty: string, res?: any[]) => false | any[];
    defaultAjaxAbortFunction: (message: any, url?: string) => void;
    defaultAjaxErrorFunction: (jqXHR: any, textStatus?: any, errorThrown?: any) => void;
    defaultAlertFunction: (msg: any, title?: any) => void;
    defaultConfirmFunction: (text: any, yesFn: any, noFn?: any) => void;
    defaultEndLoadingFunction: (url: any, timestamp: any, data?: any, res?: any) => boolean;
    defaultErrorFunction: (message: any) => void;
    defaultHistoryFunction: (obj: any) => boolean;
    defaultLinkFunction: (responseObj: any, ele: any) => boolean;
    defaultPostLinkFunction: (r: any, ele?: any) => boolean;
    defaultPreLinkFunction: (url: any, force?: boolean, ele?: any) => boolean;
    defaultResizeFunction: () => boolean;
    defaultStartLoadingFunction: (url: any, tst: any, data?: any, requestId?: any) => boolean;
    deleteProp: (obj: object, prop: string) => void;
    diffObj: (obj1: object, obj2: object, unchanged?: boolean, notRoot?: boolean) => any;
    dirName: (path: any) => string;
    download: (url: any, filename?: string, params?: any) => any;
    downloadContent: (filename: any, content: any, type?: any) => void;
    each: (arr: any, fn: any) => any;
    eraseCookie: (name: any) => void;
    error: (errorMsg: any) => never;
    escapeDquotes: (str: any) => any;
    escapeRegExp: (str: any) => any;
    escapeSquotes: (str: any) => any;
    escapeTicks: (str: any) => any;
    escapeUrl: (url: any, params: any) => string;
    extend: (...originalArgs: (boolean | object)[]) => any;
    extendOut: (...args: object[]) => any;
    fdate: (d: any, wrong_result?: boolean) => any;
    fdatetime: (d: any, wrong_result?: boolean) => any;
    fieldValue: (field: any) => any;
    fileExt: (filename: any) => any;
    filter: (arr: any[], prop: string | object | import("./fn/object/filterToConditions.js").Filter | ((a: any, i: string | number | symbol) => boolean), val?: any, operator?: string) => any[];
    filterToConditions: (filter: any, operator?: string) => import("./fn/object/filterToConditions.js").Filter;
    findAll: (arr: any, filter: any, deepProperty: any, res?: any[]) => any[];
    fori: (arr: any, fn: any, max?: number, min?: number) => void;
    forir: (arr: any, fn: any, max?: number, min?: number) => void;
    format: (str: any) => any;
    formatBytes: (bytes: any, decimals?: number) => string;
    formatDate: (date: any, format: any) => string;
    formatSize: (st: any, noValid: any) => any;
    formdata: (form: any) => {};
    fromXml: (xml: any, arrayTags: any) => {};
    ftime: (d: any, wrong_result: any) => any;
    getAllTags: () => any[];
    getAncestors: (ele: any, selector?: any) => any[];
    getAttributes: (ele: any) => any;
    getBrowserName: () => "Edge" | "Opera" | "Chrome" | "Internet Explorer" | "Firefox" | "Safari" | "Other";
    getBrowserVersion: () => string;
    getCookie: (name: any) => any;
    getCssVar: (varname: any) => string;
    getDay: (v: any) => number | false;
    getDeviceType: () => "mobile" | "tablet" | "desktop";
    getEventData: (e: any) => Promise<unknown>;
    getField: (arr: any[], field: string, prop?: string | object, val?: any, operator?: string) => any;
    getFieldValues: (arr: object[], field: string, prop: any, val: any, operator: any) => any[];
    getHtml: (ele: any, stripComments?: boolean) => any;
    getHTMLOfSelection: () => string;
    getLoader: (requestId: any) => BbnLoader;
    getPath: (element: any) => any;
    getProp: (obj: any, prop: any) => any;
    getProperty: (obj: any, prop: any) => any;
    getRequestId: (url: any, data: any, datatype: any) => string;
    getRow: (arr: any[], prop: string | object, val?: any, operator?: string) => any;
    getScrollBarSize: () => number;
    getText: (ele: any) => any;
    getTimeoff: () => number;
    happy: (...args: any[]) => any;
    hash: (obj: any) => string;
    hex2rgb: (hex: any) => {
        r: number;
        g: number;
        b: number;
    };
    history: () => false | History;
    html2text: (st: any) => any;
    imageToCanvas: (img: any) => HTMLCanvasElement;
    imgToBase64: (img: any, type?: string) => string;
    info: (...args: any[]) => any;
    init: (cfg: any, force: any) => void;
    isActiveInterface: (secs?: number) => boolean;
    isArray: (...args: any[]) => boolean;
    isBlob: (...args: any[]) => boolean;
    isBoolean: (...args: any[]) => boolean;
    isCanvas: (...args: any[]) => boolean;
    isColor: (...args: any[]) => boolean;
    isComment: (...args: any[]) => boolean;
    isCp: (...args: any[]) => boolean;
    isDate: (...args: any[]) => boolean;
    isDesktopDevice: () => boolean;
    isDimension: (...args: any[]) => boolean;
    isDom: (...args: any[]) => boolean;
    isEmail: (...args: any[]) => boolean;
    isEmpty: (obj: any) => boolean;
    isEvent: (...args: any[]) => boolean;
    isFocused: (ele: any, contain?: boolean) => boolean;
    isFunction: (...args: any[]) => boolean;
    isHostname: (...args: any[]) => boolean;
    isInside: (ele: any, ancestor: any) => boolean;
    isInt: (...args: any[]) => boolean;
    isIP: (...args: any[]) => boolean;
    isIterable: (...args: any[]) => boolean;
    isMobile: () => boolean;
    isMobileDevice: () => boolean;
    isNull: (...args: any[]) => boolean;
    isNumber: (...args: any[]) => boolean;
    isObject: (...args: any[]) => boolean;
    isPercent: (...args: any[]) => boolean;
    isPrimitive: (...args: any[]) => boolean;
    isPromise: (...args: any[]) => boolean;
    isPropSize: (name: any) => boolean;
    isSame: (obj1: any, obj2: any, done?: any[]) => boolean;
    isSQLDate: (...args: any[]) => boolean;
    isString: (...args: any[]) => boolean;
    isSymbol: (...args: any[]) => boolean;
    isTabletDevice: () => boolean;
    isURL: (...args: any[]) => boolean;
    isValidDimension: (st: any) => boolean;
    isValidName: (...args: any[]) => boolean;
    isValue: (...args: any[]) => boolean;
    isVue: (...args: any[]) => boolean;
    iterate: (obj: any, fn: any, noPrivate?: boolean, reverse?: boolean) => any;
    lightenDarkenHex: (hex: any, amt: any) => string;
    link: (...args: any[]) => any;
    log: (...args: any[]) => any;
    makeReactive: (obj: any, onSet: any, parent: any, parentProp: any) => any;
    map: (arr: any, fn: any, deepProp: any, level?: number) => any;
    md5: (st: any) => string;
    money: (val: number, kilo?: boolean, currency?: string, novalue?: string | false, decimal?: string, thousands?: string, precision?: number) => string;
    move: (arr: any[], fromIndex: number, toIndex: number) => any[];
    multiorder: (arr: object[], orders: any) => object[];
    nl2br: (st: any, keepNl: any) => string;
    numProperties: (obj: object) => number;
    objectToFormData: (obj: any, key?: string, ignoreList?: any) => FormData;
    order: (arr: any, prop: any, dir?: string) => any;
    outerHeight: (ele: HTMLElement) => number | false;
    outerWidth: (ele: HTMLElement) => number | false;
    percent: (percent: any, cent: any) => number;
    pickValue: (arr: any[]) => any;
    post: (...args: any[]) => any;
    postOut: (url: any, data: any, success?: any, target?: string) => void;
    printf: (format: any) => any;
    quotes2html: (st: string, type?: string) => string;
    randomInt: (min: number, max: number) => number;
    randomString: (min?: number, max?: string | number, types?: string) => string;
    removeAccents: (st: string) => string;
    removeEmpty: (arr: any[]) => any[];
    removeExtraSpaces: (str: string) => string;
    removeHtmlComments: (str: string) => string;
    removePrivateProp: (obj: object, deep?: boolean) => any;
    removeTrailingChars: (st: string, char?: string) => string;
    repeat: (st: string, num: number) => string;
    replaceAll: (find: string, replace: string, str: string, flags?: string) => string;
    replaceSelection: (html: any, selectInserted: any) => void;
    resize: () => void;
    rgb2hex: (rgb: any) => string;
    riterate: (obj: any, fn: any, noPrivate?: boolean) => any;
    roundDecimal: (value: number, decimals: number) => number;
    sanitize: (str: any, separator?: string) => any;
    search: (arr: any[], prop: string | object | import("./fn/object/filterToConditions.js").Filter | ((a: any, i: string | number | symbol) => boolean), val?: any, operator?: string | number, startFrom?: number) => number;
    selectElementText: (ele: any, win?: any) => void;
    selector: (ele: any) => any;
    setCookie: (name: any, value: any, days: any) => void;
    setCssVar: (varname: any, value: any) => void;
    setNavigationVars: (url: any, title: any, data?: any, repl?: boolean) => void;
    setProp: (obj: object, prop: string, value: any, writable?: boolean, configurable?: boolean) => void;
    setProperty: (obj: object, prop: string, value: any, force?: boolean) => void;
    shorten: (st: string, len?: number, adj?: string) => string;
    shortenObj: (obj: any, max?: number) => object;
    shuffle: (array: any[]) => any[];
    simpleHash: (str: any) => string;
    simpleHash1: (str: string) => number;
    simpleHash2: (str: string) => number;
    startChrono: (name: any) => void;
    stopChrono: (name: any) => number;
    string2ArrayBuffer: (str: string) => ArrayBuffer;
    submit: (form: HTMLFormElement, e?: Event, fn?: Function) => void;
    substr: (str: string, from: number, length?: number) => string;
    sum: (arr: object[], numberProp: string | ((a: any) => any), prop: string | object, val?: any, operator?: string) => number;
    timestamp: (seconds?: boolean) => number;
    toCSV: (arr: any, valSep?: string, rowSep?: string, valEsc?: string) => string;
    toggleFullScreen: () => void;
    translate: (o: object, namespace?: string) => void;
    treatAjaxArguments: (args: any) => any;
    trim: (str: any, hair?: string) => any;
    uniqString: (...args: any[]) => string;
    unique: (arr: any[]) => any[];
    upload: (url: any, file: any, success?: any, failure?: any, progress?: any) => any;
    warning: (message: any) => void;
};
export { fn };
