{
    "!name": "bbn",
    "bbn": {
        "fn": {
            "ajax": {
                "!type": "fn(url: string, datatype: string, data: Object, success: Function, failure: Function, abort: Function) -> Promise",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/ajax\/ajax",
                "!doc": "Creates an XHR object and returns the Promise."
            },
            "treatAjaxArguments": {
                "!type": "fn(args: mixed) -> Object",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/ajax\/treatAjaxArguments",
                "!doc": "Transforms unordered arguments into a configuratiuon object for Ajax shortcut functions."
            },
            "post": {
                "!type": "fn() -> undefined|Promise",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/ajax\/post",
                "!doc": "Creates a POST XHR through bbn.fn.ajax then launches bbn.fn.callback with the result."
            },
            "link": {
                "!type": "fn() -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/ajax\/link",
                "!doc": "Follows a link and if needed by sending the corresponding Ajax request and executing bbn.fn.defaultPreLinkFunction."
            },
            "callback": {
                "!type": "fn(url: string, res: Object, fn: Function, fn2: Function, ele: HTMLElement) -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/ajax\/callback",
                "!doc": "Executes a serie of predefined actions once an Ajax request has been done."
            },
            "setNavigationVars": {
                "!type": "fn(url: string, title: string, data: Object, repl: Boolean) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/ajax\/setNavigationVars",
                "!doc": "Changes the URL and the associated variables and updates the history."
            },
            "postOut": {
                "!type": "fn(url: string, data: Object, success: Function, target: string) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/ajax\/postOut",
                "!doc": "Posts a request in a new window."
            },
            "abort": {
                "!type": "fn(requestId: string) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/ajax\/abort",
                "!doc": "Aborts (client side) the XHR corresponding to the given ID if it still exists."
            },
            "abortURL": {
                "!type": "fn(requestId: string) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/ajax\/abortURL",
                "!doc": "Aborts (client side) all the XHR using the given URL if it still exists."
            },
            "downloadContent": {
                "!type": "fn(filename: string, content: HTMLCanvasElement|File|String, type: string) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/ajax\/downloadContent",
                "!doc": "Downloads a file with given filename from the given content."
            },
            "download": {
                "!type": "fn(url: string, filename: string, params: Object) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/ajax\/download",
                "!doc": "Downloads a file with given filename from a URL."
            },
            "upload": {
                "!type": "fn(url: string, file: File, success: Function, failure: Function, progress: Function) -> Promise",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/ajax\/upload",
                "!doc": "Uploads a file synchronously through an XHR indicating progress."
            },
            "getLoader": {
                "!type": "fn(requestId: string) -> false|Object",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/ajax\/getLoader",
                "!doc": "Finds the loader object corresponding to the given unique ID and returns it if found."
            },
            "getRequestId": {
                "!type": "fn(url: string, data: Object, datatype: string) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/ajax\/getRequestId",
                "!doc": "Returns a unique ID for a \"loader\" based on the URL, the data keys and the datatype."
            },
            "date": {
                "!type": "fn(v: String|Number) -> date",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/datetime\/date",
                "!doc": "Returns a date object from the given argument."
            },
            "dateSQL": {
                "!type": "fn(v: Date|String, dayOnly: Boolean) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/datetime\/dateSQL",
                "!doc": "Returns a date with SQL format."
            },
            "daysInMonth": {
                "!type": "fn(v: String|Date) -> Number",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/datetime\/daysInMonth",
                "!doc": "Returns the number of days of the month given in the date."
            },
            "getDay": {
                "!type": "fn(v: String|Date) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/datetime\/getDay",
                "!doc": ""
            },
            "fdate": {
                "!type": "fn(d: String|Date, wrong_result: string) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/datetime\/fdate",
                "!doc": ""
            },
            "fdatetime": {
                "!type": "fn() -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/datetime\/fdatetime",
                "!doc": ""
            },
            "ftime": {
                "!type": "fn() -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/datetime\/ftime",
                "!doc": ""
            },
            "addInputs": {
                "!type": "fn(form: HTMLElement, params: Object, prefix: string) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/form\/addInputs",
                "!doc": "Adds the given data to the given form by inserting hidden inputs."
            },
            "submit": {
                "!type": "fn(form: HTMLElement, e: Event, fn: Function) -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/form\/submit",
                "!doc": "Submit a form's data through an Ajax request."
            },
            "fieldValue": {
                "!type": "fn(field: HTMLElement) -> Mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/form\/fieldValue",
                "!doc": "Returns the value of a form's input, differenciating between checkboxes, radio and other inputs."
            },
            "formdata": {
                "!type": "fn(form: HTMLElement) -> Object",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/form\/formdata",
                "!doc": "Returns all the data contained in a form as a single object."
            },
            "objectToFormData": {
                "!type": "fn(obj: Object|Array|File, key: string, ignoreList: Array) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/form\/objectToFormData",
                "!doc": ""
            },
            "history": {
                "!type": "fn() -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/history\/history",
                "!doc": ""
            },
            "init": {
                "!type": "fn(cfg: Object) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/init\/init",
                "!doc": "Initializes the library bbn basing on the given configuration object."
            },
            "money": {
                "!type": "fn(val: String|Number, kilo: Boolean, currency: string, novalue: string, decimal: string, thousands: string, precision: Number) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/locale\/money",
                "!doc": "Returns the given value to money format basing on the given configuration."
            },
            "timestamp": {
                "!type": "fn(seconds: Number) -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/timestamp",
                "!doc": "Returns the timestamp of the given seconds if an argument is given, else returns the timestamp of new Date()."
            },
            "log": {
                "!type": "fn(args: ...any) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/log",
                "!doc": "Logs the given arguments in the browser's console."
            },
            "warning": {
                "!type": "fn(args: ...any) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/warning",
                "!doc": "Logs the given argument in the browser's console highlighting it with a yellow background and red color."
            },
            "error": {
                "!type": "fn(errorMsg: string) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/error",
                "!doc": "Throws an error."
            },
            "happy": {
                "!type": "fn(args: ...any) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/happy",
                "!doc": "Logs the given argument in the browser's console highlighting it with a green background."
            },
            "info": {
                "!type": "fn(args: ...any) -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/info",
                "!doc": "Logs the given argument in the browser's console highlighting it with a blue background."
            },
            "stat": {
                "!type": "fn(returnStat: mixed) -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/stat",
                "!doc": ""
            },
            "getPath": {
                "!type": "fn() -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/getPath",
                "!doc": ""
            },
            "setCookie": {
                "!type": "fn(name: string, value: string, days: Number) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/setCookie",
                "!doc": "Creates a cookie and assigns it to document.cookie."
            },
            "getCookie": {
                "!type": "fn(name: string) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/getCookie",
                "!doc": "If it exsists returns the cookie corresponding to the given name."
            },
            "eraseCookie": {
                "!type": "fn() -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/eraseCookie",
                "!doc": "Erase the cookie corresponding to the given name;"
            },
            "getEventData": {
                "!type": "fn() -> Promise",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/getEventData",
                "!doc": "Returns a promise having the event's data as argument."
            },
            "arrayBuffer2String": {
                "!type": "fn() -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/arrayBuffer2String",
                "!doc": ""
            },
            "string2ArrayBuffer": {
                "!type": "fn() -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/string2ArrayBuffer",
                "!doc": ""
            },
            "getHTMLOfSelection": {
                "!type": "fn() -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/getHTMLOfSelection",
                "!doc": ""
            },
            "copy": {
                "!type": "fn(st: string) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/copy",
                "!doc": "Copies to the clipboard the value of the given string."
            },
            "imageToCanvas": {
                "!type": "fn(img: HTMLElement) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/imageToCanvas",
                "!doc": "Draws the given html image nto a canvas."
            },
            "canvasToImage": {
                "!type": "fn(canvas: canvas) -> HTMLElement",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/canvasToImage",
                "!doc": "Returns a canvas in a HTML element img"
            },
            "imgToBase64": {
                "!type": "fn(img: HTMLElement) -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/imgToBase64",
                "!doc": "Returns the tag for the image in base64"
            },
            "isActiveInterface": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/isActiveInterface",
                "!doc": "Tells if the interface is beeing active for the past x seconds."
            },
            "formatBytes": {
                "!type": "fn() -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/formatBytes",
                "!doc": "Formats the value given in bytes."
            },
            "startChrono": {
                "!type": "fn() -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/startChrono",
                "!doc": "Starts a timer and gives it a name."
            },
            "stopChrono": {
                "!type": "fn(name: string) -> Number",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/stopChrono",
                "!doc": ""
            },
            "getDeviceType": {
                "!type": "fn() -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/getDeviceType",
                "!doc": "Returns the current device type."
            },
            "isMobileDevice": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/isMobileDevice",
                "!doc": "Returns true if the current device type is a mobile."
            },
            "isTabletDevice": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/isTabletDevice",
                "!doc": "Returns true if the current device type is a tablet."
            },
            "isDesktopDevice": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/isDesktopDevice",
                "!doc": "Returns true if the current device type is a desktop."
            },
            "isMobile": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/isMobile",
                "!doc": "Returns true if the current browser is on a mobile device (smartphone or tablet)."
            },
            "getTimeoff": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/getTimeoff",
                "!doc": "Returns the length of time the window has not been focused in seconds."
            },
            "isFocused": {
                "!type": "fn(ele: Element, contain: Boolean) -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/isFocused",
                "!doc": "Checks whether the given elemet is focused or not."
            },
            "selectElementText": {
                "!type": "fn(ele: Element, win: Boolean) -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/misc\/selectElementText",
                "!doc": "Selects the content of an element."
            },
            "unique": {
                "!type": "fn(arr: Array) -> Array",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/unique",
                "!doc": "Removes duplicate values from an array."
            },
            "getProperty": {
                "!type": "fn(obj: Object, prop: string) -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/getProperty",
                "!doc": "Returns the value of the given property from the given object."
            },
            "order": {
                "!type": "fn(arr: Array, prop: string, dir: string) -> Array",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/order",
                "!doc": "Sorts an array of objects based on the given property."
            },
            "multiorder": {
                "!type": "fn(arr: Array, orders: Array|Object) -> Array",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/multiorder",
                "!doc": "Sorts an array of objects based on a set of properties."
            },
            "move": {
                "!type": "fn(arr: Array, fromIndex: Number, toIndex: Number) -> Array",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/move",
                "!doc": "Moves an element to a different position within the given array."
            },
            "compare": {
                "!type": "fn(v1: String|Number, v2: String|Number, operator: string) -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/compare",
                "!doc": "Performs a comparison between two values based on the given operator and returns a boolean."
            },
            "search": {
                "!type": "fn(arr: Array, prop: String|Object|Function, val: mixed, operator: string, startFrom: Number) -> Number",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/search",
                "!doc": "Retrieves the index of the array's first element corresponding to the given filter."
            },
            "count": {
                "!type": "fn(arr: Array, prop: String|Object|Function, val: mixed, operator: string) -> Number",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/count",
                "!doc": "Counts the number of objects matching the given filter in the given array."
            },
            "getFieldValues": {
                "!type": "fn(arr: Array, field: string, prop: String|Object|Function, val: mixed, operator: string) -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/getFieldValues",
                "!doc": "Returns all the unique values of the given field (property) from the first object matching the given filter in an array."
            },
            "findAll": {
                "!type": "fn(arr: Array, prop: String|Object|Function, val: mixed, operator: string) -> Number",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/findAll",
                "!doc": "Retrieves all elements of a hierarchical array corresponding to the filter."
            },
            "sum": {
                "!type": "fn(arr: Array, numberProp: String|Function, prop: String|Object|Function, val: mixed, operator: string) -> Number",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/sum",
                "!doc": "Returns the sum of the given property or function for the array's elements matching the filter."
            },
            "filter": {
                "!type": "fn(arr: Array, prop: String|Object|Function, val: mixed, operator: string) -> Array",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/filter",
                "!doc": "Returns a new array with only the data matching the given filter."
            },
            "getRow": {
                "!type": "fn(arr: Array, prop: String|Object|Function, val: mixed, operator: string) -> Object|Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/getRow",
                "!doc": "Returns the first object matching the given filter in an array of objects."
            },
            "getField": {
                "!type": "fn(arr: Array, field: string, prop: String|Object|Function, val: mixed, operator: string) -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/getField",
                "!doc": "Returns the value of the given field (property) from the first object matching the given filter in an array of objects."
            },
            "removePrivateProp": {
                "!type": "fn(obj: Object, deep: Boolean) -> Object",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/removePrivateProp",
                "!doc": "Returns an object with the original objects' properties starting with an alphanumeric character."
            },
            "numProperties": {
                "!type": "fn(obj: Object) -> Number",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/numProperties",
                "!doc": "Returns the number of properties contained in the object."
            },
            "isSame": {
                "!type": "fn(obj1: Object, obj2: Object) -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/isSame",
                "!doc": "Checks whether the data contained in the given objects is identical."
            },
            "filterToConditions": {
                "!type": "fn(filter: Object, operator: string) -> Object",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/filterToConditions",
                "!doc": "Converts the given object 'filter' to a valid format of condition."
            },
            "compareConditions": {
                "!type": "fn(data: Object, filter: Object) -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/compareConditions",
                "!doc": "Checks whether the given data object complies or not with the given filter."
            },
            "extend": {
                "!type": "fn() -> Object",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/extend",
                "!doc": "Merges the contents of two or more objects together into the first object."
            },
            "extendOut": {
                "!type": "fn() -> Object",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/extendOut",
                "!doc": "Returns a new object made of the properties from all the given objects."
            },
            "autoExtend": {
                "!type": "fn(namespace: string, obj: Object) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/autoExtend",
                "!doc": "Extends the bbn object by passing the namespace and the object it will merge with."
            },
            "removeEmpty": {
                "!type": "fn(arr: Array) -> Array",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/removeEmpty",
                "!doc": "Returns a new array, having removed all elements deemed empty from the given array."
            },
            "arrayFromProp": {
                "!type": "fn(arr: Array, prop: string) -> Array",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/arrayFromProp",
                "!doc": "Creates and returns a new array made of the given property's values from the given array of objects."
            },
            "pickValue": {
                "!type": "fn(arr: Array) -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/pickValue",
                "!doc": "Returns a random item from the given array."
            },
            "diffObj": {
                "!type": "fn(obj1: Object, obj2: Object, unchanged: string, notRoot: Boolean) -> Object",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/diffObj",
                "!doc": "Returns an object describing the differences for transforming the first given object into the second."
            },
            "fori": {
                "!type": "fn(arr: Array, fn: Function, max: Number, min: Number) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/fori",
                "!doc": "Executes the provided function on each element of the given array."
            },
            "forir": {
                "!type": "fn(arr: Array, fn: Function, max: Number, min: Number) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/forir",
                "!doc": "Executes the provided function on each element of the given array, going backward."
            },
            "each": {
                "!type": "fn(arr: mixed, fn: Function) -> [Array",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/each",
                "!doc": "Executes the provided function on each element of the given array."
            },
            "iterate": {
                "!type": "fn(obj: Object|Number, fn: Function, noPrivate: Boolean) -> Object",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/iterate",
                "!doc": "Executes the provided function on each property of the given object."
            },
            "clone": {
                "!type": "fn(obj: Object) -> Object",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/clone",
                "!doc": "Creates and returns a perfect clone - but different - from the given object."
            },
            "map": {
                "!type": "fn(arr: Array, fn: Function, deepProp: Boolean, level: Number) -> Array",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/map",
                "!doc": "Returns a new array generated by the execution of a function for each item of the given array."
            },
            "toCSV": {
                "!type": "fn(arr: Array, valSep: string, rowSep: string, valEsc: string) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/toCSV",
                "!doc": "Returns a CSV string from the given array of arrays or objects."
            },
            "shortenObj": {
                "!type": "fn(obj: Object|Array, max: Number) -> (Object|Array)",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/object\/shortenObj",
                "!doc": "Shortens all the strings contained in the object properties or element in a array."
            },
            "formatSize": {
                "!type": "fn(st: String|Number) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/size\/formatSize",
                "!doc": "Returns the value of size for element html"
            },
            "toggleFullScreen": {
                "!type": "fn() -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/size\/toggleFullScreen",
                "!doc": "Toggles the fullscreen mode."
            },
            "getScrollBarSize": {
                "!type": "fn() -> Number",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/size\/getScrollBarSize",
                "!doc": "Retutns the size of the scrollbar realative to the current environment."
            },
            "adjustSize": {
                "!type": "fn(type: string, eles: Array) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/size\/adjustSize",
                "!doc": "Adjusts the size of the given elements."
            },
            "adjustHeight": {
                "!type": "fn() -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/size\/adjustHeight",
                "!doc": "Adjusts the height of the element(s) given as argument."
            },
            "adjustWidth": {
                "!type": "fn() -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/size\/adjustWidth",
                "!doc": "Adjusts the width of the element(s) given as argument."
            },
            "fileExt": {
                "!type": "fn(filename: string) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/fileExt",
                "!doc": "Gets the extension from a file's name."
            },
            "uniqString": {
                "!type": "fn() -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/uniqString",
                "!doc": "Create a unique string in md5 format."
            },
            "md5": {
                "!type": "fn(st: Mixed) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/md5",
                "!doc": "Converts and returns the argument passed in a string in md5 format."
            },
            "escapeRegExp": {
                "!type": "fn(str: string) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/escapeRegExp",
                "!doc": "Returns a string escaped."
            },
            "roundDecimal": {
                "!type": "fn(value: Number, decimals: Number) -> ",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/roundDecimal",
                "!doc": ""
            },
            "rgb2hex": {
                "!type": "fn(rgb: string) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/rgb2hex",
                "!doc": "Convert an RGB string to hexadecimal."
            },
            "hex2rgb": {
                "!type": "fn() -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/hex2rgb",
                "!doc": "Convert an hexadecimmal string to RGB."
            },
            "camelize": {
                "!type": "fn(str: string) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/camelize",
                "!doc": "Returns the string passed as an argument in camelize mode."
            },
            "sanitize": {
                "!type": "fn() -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/sanitize",
                "!doc": "Removes all unacceptable characters in a DOM node."
            },
            "camelToCss": {
                "!type": "fn(str: string) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/camelToCss",
                "!doc": "Returns the string passed as an argument in camelize mode for css."
            },
            "correctCase": {
                "!type": "fn(str: STring) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/correctCase",
                "!doc": "Converts the first character of the string to uppercase."
            },
            "randomInt": {
                "!type": "fn(min: Number, max: Number) -> Number",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/randomInt",
                "!doc": "Returns a random integer."
            },
            "randomString": {
                "!type": "fn(length: Number, chars: string) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/randomString",
                "!doc": "Returns a random String with random lenght,"
            },
            "shorten": {
                "!type": "fn(st: string, len: Number) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/shorten",
                "!doc": "Shortens the given string after *len* characters."
            },
            "replaceAll": {
                "!type": "fn(find: string, replace: string, str: String|RegExp, flags: string) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/replaceAll",
                "!doc": "Looks for and replaces parts of string with what we want."
            },
            "quotes2html": {
                "!type": "fn(st: string) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/quotes2html",
                "!doc": "Replace quotes in ASCII code"
            },
            "nl2br": {
                "!type": "fn(st: string) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/nl2br",
                "!doc": "Replaces all new line characters '\\ n' with html tag '<br>'."
            },
            "br2nl": {
                "!type": "fn(st: trin) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/br2nl",
                "!doc": "Replaces the html <br> tag with new line characters '\\ n' if present in the string."
            },
            "html2text": {
                "!type": "fn(st: string) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/html2text",
                "!doc": "Convert text in html format to plain text."
            },
            "removeAccents": {
                "!type": "fn(st: string) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/removeAccents",
                "!doc": "Returns the string passed as an argument without accents."
            },
            "percent": {
                "!type": "fn(percent: Number|String, cent: Number|String) -> Number",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/percent",
                "!doc": "Returns the value of the proportion giving the percentage and the total from where to be calculated."
            },
            "substr": {
                "!type": "fn(str: string, from: Number, length: Number) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/substr",
                "!doc": "Basic substring function accepting both positive and negative values."
            },
            "dirName": {
                "!type": "fn(path: string) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/dirName",
                "!doc": "Returns the path of the folder containing the last hierarchical element of the path."
            },
            "baseName": {
                "!type": "fn(path: string, suffix: string) -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/baseName",
                "!doc": "Returns the name of the element indicated by path given to it as an argument."
            },
            "printf": {
                "!type": "fn(format: trin) -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/printf",
                "!doc": ""
            },
            "removeTrailingChars": {
                "!type": "fn(st: string, char: string) -> mixed",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/removeTrailingChars",
                "!doc": ""
            },
            "repeat": {
                "!type": "fn() -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/string\/repeat",
                "!doc": "Returns a string which is the repetition of the first argument for the number passed in the second argument."
            },
            "center": {
                "!type": "fn(ele: HTMLElement) -> HTMLElement",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/style\/center",
                "!doc": "Centers the given element by giving it a position absolute."
            },
            "addColors": {
                "!type": "fn(colors: Object) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/style\/addColors",
                "!doc": "Adds the given color to the object bbn.var.colors in order to be able to use"
            },
            "colorToHex": {
                "!type": "fn() -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/style\/colorToHex",
                "!doc": "Returns the hex color of the given rgb or color name."
            },
            "lightenDarkenHex": {
                "!type": "fn() -> String",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/style\/lightenDarkenHex",
                "!doc": "Takes color in hex format and lightens or darkens it with the given value."
            },
            "isEmail": {
                "!type": "fn(st: string) -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isEmail",
                "!doc": "Intended to check if the argument provided is an e-mail address written correctly"
            },
            "isColor": {
                "!type": "fn(st: string) -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isColor",
                "!doc": "Intended to check if the argument provided is a color."
            },
            "isIterable": {
                "!type": "fn(st: string) -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isIterable",
                "!doc": "Returns true if the given object can be iterated as an array (numerically)."
            },
            "isDimension": {
                "!type": "fn(st: string) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isDimension",
                "!doc": "Returns true if the given value is a valid CSS dimension string or a number, false otherwise."
            },
            "isValidDimension": {
                "!type": "fn(st: string) -> undefined",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isValidDimension",
                "!doc": "Returns true if the given value is a valid CSS dimension string, false otherwise."
            },
            "isEmpty": {
                "!type": "fn(obj: mixed) -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isEmpty",
                "!doc": "Checks if the argument is empty or not."
            },
            "isBlob": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isBlob",
                "!doc": ""
            },
            "isNumber": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isNumber",
                "!doc": "Returns true if the given argument is a number"
            },
            "isInt": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isInt",
                "!doc": "Returns true if the given argument is an integer"
            },
            "isString": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isString",
                "!doc": "Returns true if the given argument is a string;"
            },
            "isSymbol": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isSymbol",
                "!doc": "Returns true if the given argument is a symbol;"
            },
            "isBoolean": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isBoolean",
                "!doc": "Returns true if the given argument is a boolean"
            },
            "isArray": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isArray",
                "!doc": "Returns true if the given argument is array."
            },
            "isDate": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isDate",
                "!doc": "Returns true if the given argument is a date object."
            },
            "isObject": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isObject",
                "!doc": "Returns true if the given argument is an object."
            },
            "isEvent": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isEvent",
                "!doc": "Returns true if the given argument is an event."
            },
            "isNull": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isNull",
                "!doc": "Returns true if the given argument is null;"
            },
            "isValue": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isValue",
                "!doc": "Returns true if the given argument is not null or type object or array."
            },
            "isDom": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isDom",
                "!doc": "Returns true if the given argument is a dom element;"
            },
            "isComment": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isComment",
                "!doc": "Returns true if the given argument is a dom comment;"
            },
            "isCanvas": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isCanvas",
                "!doc": "Returns true if the given argumen is a Canvas."
            },
            "isVue": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isVue",
                "!doc": "Returns true if the given argumen is a VueJS object."
            },
            "isPercent": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isPercent",
                "!doc": "Returns true if the given argument is a percentage."
            },
            "isURL": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isURL",
                "!doc": ""
            },
            "isIP": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isIP",
                "!doc": ""
            },
            "isHostname": {
                "!type": "fn() -> Boolean",
                "!url": "https:\/\/bbn.io\/bbn-js\/doc\/type\/isHostname",
                "!doc": ""
            }
        }
    }
}